/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_btn_conditionerA_out;
  reg [1-1:0] M_btn_conditionerA_in;
  button_conditioner_2 btn_conditionerA (
    .clk(clk),
    .in(M_btn_conditionerA_in),
    .out(M_btn_conditionerA_out)
  );
  wire [1-1:0] M_btn_conditionerM_out;
  reg [1-1:0] M_btn_conditionerM_in;
  button_conditioner_2 btn_conditionerM (
    .clk(clk),
    .in(M_btn_conditionerM_in),
    .out(M_btn_conditionerM_out)
  );
  wire [1-1:0] M_btn_conditionerInput_out;
  reg [1-1:0] M_btn_conditionerInput_in;
  button_conditioner_2 btn_conditionerInput (
    .clk(clk),
    .in(M_btn_conditionerInput_in),
    .out(M_btn_conditionerInput_out)
  );
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  reg [15:0] M_aInput_d, M_aInput_q = 1'h0;
  reg [15:0] M_bInput_d, M_bInput_q = 1'h0;
  reg [5:0] M_alufnInput_d, M_alufnInput_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  localparam ADDERADD_states = 5'd0;
  localparam ADDERSUB_states = 5'd1;
  localparam ADDERADDOF_states = 5'd2;
  localparam ADDERSUBOF_states = 5'd3;
  localparam ADDERERROR_states = 5'd4;
  localparam ADDMUL_states = 5'd5;
  localparam ADDMULOF_states = 5'd6;
  localparam COMPAREEQUALSTRUE_states = 5'd7;
  localparam COMPAREEQUALSFALSE_states = 5'd8;
  localparam COMPARELESSTHANTRUE_states = 5'd9;
  localparam COMPARELESSTHANFALSE_states = 5'd10;
  localparam COMPARELESSANDEQUALS1_states = 5'd11;
  localparam COMPARELESSANDEQUALS2_states = 5'd12;
  localparam COMPARELESSANDEQUALS3_states = 5'd13;
  localparam COMPAREERROR_states = 5'd14;
  localparam BOOLEANAND_states = 5'd15;
  localparam BOOLEANOR_states = 5'd16;
  localparam BOOLEANXOR_states = 5'd17;
  localparam BOOLEANA_states = 5'd18;
  localparam BOOLEANERROR_states = 5'd19;
  localparam SHIFTLEFT_states = 5'd20;
  localparam SHIFTRIGHT_states = 5'd21;
  localparam SHIFTRIGHTARITH_states = 5'd22;
  localparam SHIFTERROR_states = 5'd23;
  localparam MANUALA_states = 5'd24;
  localparam MANUALB_states = 5'd25;
  localparam MANUALALUFN_states = 5'd26;
  localparam MANUALRESULT_states = 5'd27;
  localparam START_states = 5'd28;
  
  reg [4:0] M_states_d, M_states_q = START_states;
  
  localparam MSB = 5'h1a;
  
  wire [16-1:0] M_alu_op;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [16-1:0] M_alu_aOP;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu16_6 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .op(M_alu_op),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .aOP(M_alu_aOP)
  );
  
  reg [15:0] result;
  
  always @* begin
    M_states_d = M_states_q;
    M_counter_d = M_counter_q;
    M_alufnInput_d = M_alufnInput_q;
    M_bInput_d = M_bInput_q;
    M_aInput_d = M_aInput_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_states_d = M_states_q;
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    M_alu_alufn = 6'h00;
    M_seg_values = 20'h00000;
    io_led = 24'h000000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_btn_conditionerM_in = io_button[3+0-:1];
    M_btn_conditionerA_in = io_button[4+0-:1];
    M_btn_conditionerInput_in = io_button[1+0-:1];
    
    case (M_states_q)
      START_states: begin
        M_seg_values = 20'ha3a00;
        if (M_btn_conditionerM_out == 1'h1) begin
          M_states_d = MANUALA_states;
        end
        if (M_btn_conditionerA_out == 1'h1) begin
          M_states_d = ADDERADD_states;
        end
      end
      MANUALA_states: begin
        M_aInput_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        io_led[8+7-:8] = io_dip[8+7-:8];
        io_led[0+7-:8] = io_dip[0+7-:8];
        M_seg_values = 20'h7a832;
        M_counter_d = M_counter_q + 1'h1;
        if (M_btn_conditionerInput_out == 1'h1 && M_counter_q[26+0-:1] == 1'h1) begin
          M_states_d = MANUALB_states;
          M_counter_d = 1'h0;
        end
      end
      MANUALB_states: begin
        M_bInput_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        io_led[0+7-:8] = io_dip[0+7-:8];
        io_led[8+7-:8] = io_dip[8+7-:8];
        M_seg_values = 20'h7ac32;
        M_counter_d = M_counter_q + 1'h1;
        if (M_btn_conditionerInput_out == 1'h1 && M_counter_q[26+0-:1] == 1'h1) begin
          M_states_d = MANUALALUFN_states;
          M_counter_d = 1'h0;
        end
      end
      MANUALALUFN_states: begin
        M_alufnInput_d = io_dip[16+0+5-:6];
        io_led[16+0+5-:6] = io_dip[16+0+5-:6];
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 20'h059d3;
        if (M_btn_conditionerInput_out == 1'h1 && M_counter_q[26+0-:1] == 1'h1) begin
          M_states_d = MANUALRESULT_states;
          M_counter_d = 1'h0;
        end
      end
      MANUALRESULT_states: begin
        M_seg_values = 20'h7aa45;
        M_alu_a = M_aInput_q;
        M_alu_b = M_bInput_q;
        M_alu_alufn = M_alufnInput_q;
        io_led[0+7-:8] = M_alu_op[0+7-:8];
        io_led[8+7-:8] = M_alu_op[8+7-:8];
        M_states_d = MANUALRESULT_states;
      end
      ADDERADD_states: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 16'h0064;
        M_alu_b = 16'h0017;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h535aa;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h007b) begin
          M_states_d = ADDERSUB_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h007b) begin
          M_states_d = ADDERERROR_states;
          M_counter_d = 1'h0;
        end
      end
      ADDERSUB_states: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 16'h0064;
        M_alu_b = 16'h0017;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h535a5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h004d) begin
          M_states_d = ADDERADDOF_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h004d) begin
          M_counter_d = 1'h0;
          M_states_d = ADDERERROR_states;
        end
      end
      ADDERADDOF_states: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 16'h4000;
        M_alu_b = 16'h4001;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        io_led[16+7+0-:1] = 1'h1;
        M_seg_values = 20'h535aa;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h8001) begin
          M_states_d = ADDERSUBOF_states;
          io_led[0+0+0-:1] = result[15+0-:1];
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h8001) begin
          M_states_d = ADDERERROR_states;
          M_counter_d = 1'h0;
        end
      end
      ADDERSUBOF_states: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 16'h8000;
        M_alu_b = 16'h0001;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        io_led[16+7+0-:1] = 1'h1;
        M_seg_values = 20'h535a5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h7fff) begin
          M_states_d = ADDMUL_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h7fff) begin
          M_states_d = ADDERERROR_states;
          M_counter_d = 1'h0;
        end
      end
      ADDMUL_states: begin
        M_alu_alufn = 6'h02;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0003;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h535b5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h000c) begin
          M_states_d = ADDMULOF_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h000c) begin
          M_states_d = ADDERERROR_states;
          M_counter_d = 1'h0;
        end
      end
      ADDMULOF_states: begin
        M_alu_alufn = 6'h02;
        M_alu_a = 16'h4000;
        M_alu_b = 16'h0002;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        io_led[16+7+0-:1] = 1'h1;
        M_seg_values = 20'h535b5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h8000) begin
          M_states_d = COMPAREEQUALSTRUE_states;
          io_led[0+0+0-:1] = result[15+0-:1];
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h8000) begin
          M_states_d = ADDERERROR_states;
          M_counter_d = 1'h0;
        end
      end
      ADDERERROR_states: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 20'h53a73;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_states_d = ADDERERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPAREEQUALSTRUE_states: begin
        M_alu_alufn = 6'h33;
        M_alu_a = 16'h0033;
        M_alu_b = 16'h0033;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h6382f;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 1'h1) begin
          M_states_d = COMPAREEQUALSFALSE_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 1'h1) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPAREEQUALSFALSE_states: begin
        M_alu_alufn = 6'h33;
        M_alu_a = 16'h0032;
        M_alu_b = 16'h0033;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 20'h6380f;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 1'h0) begin
          M_states_d = COMPARELESSTHANTRUE_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0001;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 1'h0) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPARELESSTHANTRUE_states: begin
        M_alu_alufn = 6'h35;
        M_alu_a = 16'h0032;
        M_alu_b = 16'h0033;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 20'h6402f;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 1'h1) begin
          M_states_d = COMPARELESSTHANFALSE_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 1'h1) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPARELESSTHANFALSE_states: begin
        M_alu_alufn = 6'h35;
        M_alu_a = 16'h0033;
        M_alu_b = 16'h0032;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 20'h6400f;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 1'h0) begin
          M_states_d = COMPARELESSANDEQUALS1_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0001;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 1'h0) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPARELESSANDEQUALS1_states: begin
        M_alu_alufn = 6'h37;
        M_alu_a = 16'h0033;
        M_alu_b = 16'h0033;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h641c1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 1'h1) begin
          M_states_d = COMPARELESSANDEQUALS2_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 1'h1) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPARELESSANDEQUALS2_states: begin
        M_alu_alufn = 6'h37;
        M_alu_a = 16'h0000;
        M_alu_b = 16'h0001;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h641c1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result[0+0-:1] == 1'h1) begin
          M_states_d = COMPARELESSANDEQUALS3_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result[0+0-:1] != 1'h1) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPARELESSANDEQUALS3_states: begin
        M_alu_alufn = 6'h37;
        M_alu_a = 16'h0033;
        M_alu_b = 16'h0032;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 20'h641c0;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 1'h0) begin
          M_states_d = BOOLEANAND_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0001;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 1'h0) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      COMPAREERROR_states: begin
        M_seg_values = 20'h63a73;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_states_d = COMPAREERROR_states;
          M_counter_d = 1'h0;
        end
      end
      BOOLEANAND_states: begin
        M_alu_alufn = 6'h18;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0005;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h5aa4d;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h0001) begin
          M_states_d = BOOLEANOR_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h0001) begin
          M_states_d = BOOLEANERROR_states;
          M_counter_d = 1'h0;
        end
      end
      BOOLEANOR_states: begin
        M_alu_alufn = 6'h1e;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0005;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h5c66f;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h0007) begin
          M_states_d = BOOLEANXOR_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h0007) begin
          M_states_d = BOOLEANERROR_states;
          M_counter_d = 1'h0;
        end
      end
      BOOLEANXOR_states: begin
        M_alu_alufn = 6'h16;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0005;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h5d633;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h0006) begin
          M_states_d = BOOLEANA_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h0006) begin
          M_states_d = BOOLEANERROR_states;
          M_counter_d = 1'h0;
        end
      end
      BOOLEANA_states: begin
        M_alu_alufn = 6'h1a;
        M_alu_a = 16'h00ac;
        M_alu_b = 16'h006c;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h5a9ef;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h00ac) begin
          M_states_d = SHIFTLEFT_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h00ac) begin
          M_states_d = BOOLEANERROR_states;
          M_counter_d = 1'h0;
        end
      end
      BOOLEANERROR_states: begin
        M_seg_values = 20'h5ba73;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_states_d = BOOLEANERROR_states;
          M_counter_d = 1'h0;
        end
      end
      SHIFTLEFT_states: begin
        M_alu_alufn = 6'h20;
        M_alu_a = 16'h002c;
        M_alu_b = 16'h0007;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h2d20f;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h1600) begin
          M_states_d = SHIFTRIGHT_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h1600) begin
          M_states_d = SHIFTERROR_states;
          M_counter_d = 1'h0;
        end
      end
      SHIFTRIGHT_states: begin
        M_alu_alufn = 6'h21;
        M_alu_a = 16'h002c;
        M_alu_b = 16'h0002;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h2d26f;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'h000b) begin
          M_states_d = SHIFTRIGHTARITH_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'h000b) begin
          M_states_d = SHIFTERROR_states;
          M_counter_d = 1'h0;
        end
      end
      SHIFTRIGHTARITH_states: begin
        M_alu_alufn = 6'h23;
        M_alu_a = 16'hb000;
        M_alu_b = 16'h0002;
        result = M_alu_op;
        io_led[8+7-:8] = result[8+7-:8];
        io_led[0+7-:8] = result[0+7-:8];
        M_seg_values = 20'h2d14f;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1 && result == 16'hec00) begin
          M_states_d = START_states;
          M_counter_d = 1'h0;
        end
        if (io_dip[0+0+0-:1] == 1'h1) begin
          result = 16'h0000;
        end
        if (M_counter_q[26+0-:1] == 1'h1 && result != 16'hec00) begin
          M_states_d = SHIFTERROR_states;
          M_counter_d = 1'h0;
        end
      end
      SHIFTERROR_states: begin
        M_seg_values = 20'h2ba73;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_states_d = SHIFTERROR_states;
          M_counter_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_aInput_q <= 1'h0;
      M_bInput_q <= 1'h0;
      M_alufnInput_q <= 1'h0;
      M_states_q <= 5'h1c;
    end else begin
      M_counter_q <= M_counter_d;
      M_aInput_q <= M_aInput_d;
      M_bInput_q <= M_bInput_d;
      M_alufnInput_q <= M_alufnInput_d;
      M_states_q <= M_states_d;
    end
  end
  
endmodule
